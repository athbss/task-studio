{
   "master": {
      "tasks": [
         {
            "id": 3,
            "title": "Define TypeScript Data Models and Interfaces",
            "description": "Create mapping utilities to transform Taskmaster CLI data into existing Issue/Project interfaces and establish validation schemas",
            "status": "pending",
            "dependencies": [],
            "priority": "medium",
            "details": "Create /lib/taskmaster-mapping.ts with transformation functions to map Taskmaster CLI task data to existing Issue interface fields. Map Taskmaster status values to existing Status interface, priority levels to Priority interface, and tag contexts to Project interface. Create Zod schemas for Taskmaster CLI data validation and Issue/Project runtime validation. Implement utility functions for bidirectional mapping between Taskmaster task format and UI Issue format.",
            "testStrategy": "Test mapping functions with real Taskmaster CLI output, verify all Issue interface fields are properly populated, validate Zod schemas with sample data, ensure round-trip mapping preserves data integrity",
            "subtasks": [
               {
                  "id": 1,
                  "title": "Analyze existing Issue/Project interfaces",
                  "description": "Review existing interfaces in /mock-data/ to understand current data structure",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 2,
                  "title": "Create Taskmaster to Issue mapping functions",
                  "description": "Implement functions to transform Taskmaster task data to Issue interface format",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 3,
                  "title": "Map Taskmaster tags to Project interface",
                  "description": "Create mapping logic to represent Taskmaster tag contexts as Project entities",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 4,
                  "title": "Create Zod validation schemas",
                  "description": "Add Zod schemas for Taskmaster CLI data validation and Issue/Project runtime validation",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 5,
                  "title": "Implement bidirectional mapping utilities",
                  "description": "Create utility functions for converting between Taskmaster and UI data formats",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               }
            ]
         },
         {
            "id": 4,
            "title": "Implement File Reading and JSON Parsing",
            "description": "Create Next.js API routes and service layer for local file system access to read and parse .taskmaster/tasks/tasks.json files with error handling",
            "status": "pending",
            "dependencies": [3, "11"],
            "priority": "high",
            "details": "Create Next.js API routes in /pages/api/ or /app/api/ directory to handle local file system operations. Implement /lib/taskmaster-service.ts with functions to read tasks.json through API routes, parse tag-based structure, handle file not found errors. Create API endpoints for getCurrentTag() to read from state.json via Node.js file system APIs. Add JSON validation using Zod schemas. Handle malformed JSON gracefully with detailed error messages. Support relative and absolute paths to .taskmaster directory. Ensure proper error handling between API routes and client-side service calls.",
            "testStrategy": "Test API routes with valid and invalid JSON files, verify error handling for missing files through API layer, test with different .taskmaster directory structures, validate file system permissions, test client-server communication for file operations",
            "subtasks": [
               {
                  "id": 1,
                  "title": "Create Next.js API routes for file system access",
                  "description": "Set up API endpoints to handle local file reading using Node.js fs module",
                  "status": "pending",
                  "dependencies": [],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 2,
                  "title": "Implement Node.js file system operations",
                  "description": "Use Node.js fs module to read local files directly in API routes",
                  "status": "pending",
                  "dependencies": [1],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 3,
                  "title": "Create taskmaster service with API integration",
                  "description": "Build service layer that communicates with API routes for file operations",
                  "status": "pending",
                  "dependencies": [2],
                  "details": "",
                  "testStrategy": ""
               },
               {
                  "id": 4,
                  "title": "Add error handling for API-based file operations",
                  "description": "Implement proper error handling between client and API routes",
                  "status": "pending",
                  "dependencies": [3],
                  "details": "",
                  "testStrategy": ""
               }
            ]
         },
         {
            "id": 6,
            "title": "Connect Kanban Board View to Taskmaster Data",
            "description": "Connect existing board view component to read from .taskmaster/tasks.json organizing tasks by status with proper data mapping",
            "status": "pending",
            "dependencies": [],
            "priority": "medium",
            "details": "Update existing /components/board-view.tsx to connect to Taskmaster data source. Map Taskmaster status values (pending, in_progress, done, cancelled) to kanban columns. Use the existing API endpoints to fetch tasks.json data. Implement proper error handling for missing or invalid task data. Ensure component handles tag-specific task filtering when tag context is switched. Maintain existing drag-and-drop visual feedback (read-only mode). Update column headers to show accurate task counts from Taskmaster data.",
            "testStrategy": "Test board displays real Taskmaster data correctly, verify status mapping works for all task states, test with different tag contexts, ensure proper error handling for corrupted data files",
            "subtasks": []
         },
         {
            "id": 7,
            "title": "Connect List View to Taskmaster Task Structure",
            "description": "Integrate existing list view component with Taskmaster data structure and field mapping",
            "status": "pending",
            "dependencies": [],
            "priority": "medium",
            "details": "Update existing /components/list-view.tsx to consume Taskmaster tasks.json data. Map Taskmaster task fields (id, title, status, priority, details, subtasks) to table columns. Handle Taskmaster-specific data types like subtask arrays and dependencies. Update sorting logic to work with Taskmaster data format. Add columns specific to Taskmaster fields like subtask count and dependency references. Maintain existing table functionality while adapting to Taskmaster schema.",
            "testStrategy": "Test list view displays all Taskmaster task fields correctly, verify sorting works with Taskmaster data types, test subtask and dependency display, ensure column visibility works with new field mapping",
            "subtasks": []
         },
         {
            "id": 8,
            "title": "Connect Tag Navigation to Taskmaster Tag System",
            "description": "Integrate existing sidebar component with Taskmaster's tagged task management system",
            "status": "pending",
            "dependencies": [4],
            "priority": "medium",
            "details": "Update existing /components/sidebar.tsx to read tag contexts from .taskmaster/state.json and tasks.json. Display available tags from Taskmaster's tagged system with proper metadata. Show current active tag from Taskmaster state. Calculate and display accurate task counts per tag from tasks.json data structure. Integrate with existing tag switching logic to update Taskmaster context. Handle Taskmaster tag metadata like descriptions and maintain existing UI functionality.",
            "testStrategy": "Test sidebar shows all Taskmaster tags correctly, verify task counts match actual data per tag, test tag switching updates Taskmaster context properly, ensure metadata display works",
            "subtasks": []
         },
         {
            "id": 9,
            "title": "Connect File Watching to Taskmaster Directory Structure",
            "description": "Integrate existing WebSocket file watching with Taskmaster's .taskmaster directory monitoring",
            "status": "pending",
            "dependencies": [4],
            "priority": "medium",
            "details": "Update existing file watcher implementation to specifically monitor .taskmaster/tasks.json, .taskmaster/state.json, and .taskmaster/tasks/*.md files. Configure chokidar to watch Taskmaster-specific file patterns. Update WebSocket events to handle Taskmaster data structure changes. Modify client-side WebSocket handling to properly update UI when Taskmaster files change. Ensure file watcher respects Taskmaster's tag-based file organization and triggers appropriate UI updates for tag-specific changes.",
            "testStrategy": "Test file watcher triggers on Taskmaster file changes, verify WebSocket updates work with tag-specific data changes, test with Taskmaster CLI operations modifying files, ensure no conflicts with Taskmaster's file management",
            "subtasks": []
         },
         {
            "id": 10,
            "title": "Connect Search and Filtering to Taskmaster Data Schema",
            "description": "Integrate existing search/filter functionality with Taskmaster task structure and tagged system",
            "status": "pending",
            "dependencies": [6, 7],
            "priority": "low",
            "details": "Update existing /components/search-filter.tsx to work with Taskmaster's data schema. Implement search across Taskmaster-specific fields (title, description, details, subtasks). Configure filters to work with Taskmaster status values, priority levels, and tag contexts. Update filter persistence to work with Taskmaster's tagged system URLs. Add filtering by Taskmaster-specific attributes like dependencies and subtask status. Ensure search works within current tag context and can optionally search across all tags.",
            "testStrategy": "Test search works across all Taskmaster task fields, verify filters work with Taskmaster data types, test tag-specific search functionality, ensure URL persistence works with Taskmaster routing",
            "subtasks": []
         },
         {
            "id": 11,
            "title": "Setup Next.js API routes for local file system access",
            "description": "Create Next.js API routes to handle file system access for reading .taskmaster files locally, enabling the web application to access local file system through server-side API endpoints.",
            "status": "in-progress",
            "dependencies": [],
            "priority": "high",
            "details": "Create Next.js API routes under /api/taskmaster/ to handle file system operations for reading .taskmaster directory contents. Implement API endpoints for reading tasks.json, state.json, and markdown files from the local .taskmaster directory. Add proper error handling and validation for file paths to prevent directory traversal attacks. Create utility functions for safe file system operations with proper path sanitization. Implement endpoints for listing available .taskmaster directories, reading task files, and watching for file changes. Add proper TypeScript types for API responses. Configure Next.js to allow file system access in the API routes. Implement caching strategy for file reads to improve performance. Add middleware for request validation and rate limiting if needed. Ensure proper CORS configuration for local development.",
            "testStrategy": "Test API routes can successfully read .taskmaster files from local file system, verify path sanitization prevents directory traversal attacks, test error handling for missing or corrupted files, verify API responses have correct TypeScript types, test file watching functionality for real-time updates, ensure proper performance with caching, test CORS configuration works for local development, verify rate limiting and validation middleware function correctly",
            "subtasks": [
               {
                  "id": 3,
                  "title": "Add request validation middleware and error handling",
                  "description": "Implement comprehensive middleware for request validation, rate limiting, error handling, and CORS configuration for the taskmaster API routes.",
                  "status": "in-progress",
                  "dependencies": [],
                  "details": "Create middleware/taskmaster.ts with rate limiting (using simple in-memory store), request validation using Zod schemas, centralized error handling with proper HTTP status codes, and CORS configuration for local development. Add logging for debugging and monitoring. Ensure all API routes use consistent error response format.",
                  "testStrategy": "Test rate limiting behavior, CORS preflight requests, malformed request handling, and proper error response formats. Verify logging captures necessary debugging information"
               },
               {
                  "id": 4,
                  "title": "Create core file system utility functions with path sanitization",
                  "description": "Implement secure utility functions for file system operations including path validation, sanitization, and safe file reading operations to prevent directory traversal attacks.",
                  "status": "done",
                  "dependencies": [],
                  "details": "Create utils/filesystem.ts with functions for: validateTaskmasterPath() to ensure paths are within allowed directories, sanitizePath() to clean user input, safeReadFile() with proper error handling, and getTaskmasterDirectories() to list available .taskmaster directories. Include proper TypeScript types and comprehensive input validation.",
                  "testStrategy": "Unit tests for path validation, sanitization edge cases, and security attack vectors like '../../../etc/passwd' attempts"
               },
               {
                  "id": 5,
                  "title": "Implement Next.js API routes for basic file operations",
                  "description": "Create API endpoints under /api/taskmaster/ for reading tasks.json, state.json, and markdown files from local .taskmaster directories.",
                  "status": "done",
                  "dependencies": [1],
                  "details": "Create /api/taskmaster/[...path].ts dynamic route handler supporting GET requests for file reading. Implement endpoints: /api/taskmaster/directories (list available), /api/taskmaster/{dir}/tasks.json, /api/taskmaster/{dir}/state.json, and /api/taskmaster/{dir}/tasks/{file}.md. Use the filesystem utilities from subtask 1 for all operations.",
                  "testStrategy": "Integration tests for each endpoint, testing valid and invalid paths, non-existent files, and proper JSON/markdown parsing"
               },
               {
                  "id": 1,
                  "title": "Create core file system utility functions with path sanitization",
                  "description": "Implement secure utility functions for file system operations including path validation, sanitization, and safe file reading operations to prevent directory traversal attacks.",
                  "dependencies": [],
                  "details": "Create utils/filesystem.ts with functions for: validateTaskmasterPath() to ensure paths are within allowed directories, sanitizePath() to clean user input, safeReadFile() with proper error handling, and getTaskmasterDirectories() to list available .taskmaster directories. Include proper TypeScript types and comprehensive input validation.",
                  "status": "done",
                  "testStrategy": "Unit tests for path validation, sanitization edge cases, and security attack vectors like '../../../etc/passwd' attempts"
               },
               {
                  "id": 2,
                  "title": "Implement Next.js API routes for basic file operations",
                  "description": "Create API endpoints under /api/taskmaster/ for reading tasks.json, state.json, and markdown files from local .taskmaster directories.",
                  "dependencies": [1],
                  "details": "Create /api/taskmaster/[...path].ts dynamic route handler supporting GET requests for file reading. Implement endpoints: /api/taskmaster/directories (list available), /api/taskmaster/{dir}/tasks.json, /api/taskmaster/{dir}/state.json, and /api/taskmaster/{dir}/tasks/{file}.md. Use the filesystem utilities from subtask 1 for all operations.",
                  "status": "done",
                  "testStrategy": "Integration tests for each endpoint, testing valid and invalid paths, non-existent files, and proper JSON/markdown parsing"
               }
            ]
         }
      ],
      "metadata": {
         "created": "2025-06-29T11:25:40.187Z",
         "updated": "2025-06-29T12:05:56.791Z",
         "description": "Tasks for taskmaster-circle-ui context"
      }
   },
   "task-viewer": {
      "tasks": [
         {
            "id": 1,
            "title": "Create Issue View Zustand Store",
            "description": "Set up dedicated Zustand store for managing issue viewer modal state including open/close state and selected task ID",
            "details": "Create src/stores/useIssueViewStore.ts with IssueViewState interface. Include selectedIssueId (string | null), isOpen (boolean), openIssue(issueId: string) action, and closeIssue() action. Use Zustand's create function with proper TypeScript typing. Store should be minimal and focused only on modal state management.",
            "testStrategy": "Manual testing of store actions - verify openIssue sets selectedIssueId and isOpen to true, closeIssue resets selectedIssueId to null and isOpen to false. Test store subscription updates in React components.",
            "priority": "high",
            "dependencies": [],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 2,
            "title": "Build IssueViewModal Wrapper Component",
            "description": "Create main modal component that wraps task details using existing shadcn/ui Dialog component with proper modal behaviors",
            "details": "Create src/components/IssueViewModal.tsx using Dialog, DialogOverlay, and DialogContent from shadcn/ui. Connect to useIssueViewStore for open/close state. Implement keyboard shortcuts (ESC to close), overlay click to close, and X button. Use proper focus management and modal accessibility patterns. Component should be conditionally rendered based on isOpen state.",
            "testStrategy": "Manual testing of modal open/close behaviors - ESC key, overlay click, X button. Verify focus management and that modal doesn't interfere with existing UI. Test keyboard accessibility and screen reader compatibility.",
            "priority": "high",
            "dependencies": [1],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 3,
            "title": "Create TaskDetailsView Content Component",
            "description": "Build component that displays all task information in a structured, readable layout within the modal",
            "details": "Create src/components/TaskDetailsView.tsx that receives TaskmasterTask as props. Layout includes: DialogHeader with task title and close button, status & priority badges, description section, details section, test strategy section, metadata (dates, assignee), and labels. Use existing component patterns and typography. Structure content in logical sections with proper spacing.",
            "testStrategy": "Test with various task data structures including tasks with and without optional fields (assignee, labels, dueDate, details, testStrategy). Verify proper text formatting and responsive layout on different screen sizes.",
            "priority": "medium",
            "dependencies": [2],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 4,
            "title": "Implement Task Data Retrieval Logic",
            "description": "Add logic to find and retrieve selected task data from existing task lists without additional API calls",
            "details": "Add task lookup functionality that finds TaskmasterTask by ID from existing data sources. Create utility function in TaskDetailsView or custom hook that accesses current task data (from context, props, or parent component state). Handle cases where task ID doesn't exist. Use simple Array.find() for MVP, can optimize with Map lookup later if needed.",
            "testStrategy": "Test task lookup with valid and invalid task IDs. Verify that modal displays correct task data and handles missing tasks gracefully. Test with different data sources (list view, board view) to ensure consistent data access.",
            "priority": "medium",
            "dependencies": [3],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 5,
            "title": "Add Click Handlers to IssueLine Component",
            "description": "Modify existing IssueLine component to open issue viewer modal when clicked",
            "details": "Update src/components/IssueLine.tsx (or equivalent) to add onClick handler that calls useIssueViewStore.openIssue(task.id). Use proper event handling to avoid conflicts with existing functionality. Ensure click area is appropriate and doesn't interfere with other interactive elements. Add cursor pointer styling to indicate clickability.",
            "testStrategy": "Test clicking on task lines opens correct modal with right task data. Verify no conflicts with existing click handlers or interactive elements within the line component. Test keyboard navigation and accessibility.",
            "priority": "medium",
            "dependencies": [4],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 6,
            "title": "Add Click Handlers to IssueCard Component",
            "description": "Modify existing IssueCard component (if applicable) to open issue viewer modal when clicked",
            "details": "Update src/components/IssueCard.tsx (or equivalent board view component) to add onClick handler similar to IssueLine. Call useIssueViewStore.openIssue(task.id) on card click. Handle event propagation properly and ensure click area covers appropriate parts of the card. Add hover states to indicate interactivity.",
            "testStrategy": "Test clicking on task cards opens modal with correct task information. Verify proper interaction with any existing card functionality (drag/drop, etc.). Test responsive behavior and touch interactions on mobile devices.",
            "priority": "medium",
            "dependencies": [5],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 7,
            "title": "Implement Action Buttons Placeholder",
            "description": "Add standard action buttons (Edit, Delete, Copy) in DialogFooter in disabled/noop state to prepare UI structure for future functionality",
            "details": "Create DialogFooter section in TaskDetailsView with standard action buttons: Edit, Delete, Copy, and Close. Style buttons as disabled or with subtle indication they're inactive. Use existing button components and styling patterns. Add onClick handlers that do nothing (noop) for Edit/Delete/Copy, proper closeIssue() for Close button. Structure UI for easy future enhancement.",
            "testStrategy": "Verify action buttons are visually present but clearly indicated as inactive. Test Close button properly closes modal. Ensure button layout is responsive and follows existing design patterns. Test keyboard navigation through buttons.",
            "priority": "low",
            "dependencies": [6],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 8,
            "title": "Style and Polish Modal Layout",
            "description": "Apply consistent styling, spacing, and visual hierarchy to the modal components following existing design patterns",
            "details": "Apply proper CSS classes and styling to IssueViewModal and TaskDetailsView. Use existing design tokens, spacing, typography, and color schemes. Ensure visual hierarchy with prominent title/status, readable body text, and clear section separation. Make responsive for different screen sizes. Follow shadcn/ui Dialog styling patterns and customize as needed.",
            "testStrategy": "Visual testing across different screen sizes and task data variations. Verify consistent styling with rest of application. Test modal appearance with long text content, many labels, and minimal data. Check dark/light theme compatibility if applicable.",
            "priority": "medium",
            "dependencies": [7],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 9,
            "title": "Integrate Modal with Existing Page Layouts",
            "description": "Add IssueViewModal component to main application layout and ensure proper integration with existing views",
            "details": "Import and include IssueViewModal component in main layout or page components where task lists are displayed (AllIssuesPage, BoardView, etc.). Ensure modal renders above existing content with proper z-index. Test integration with existing routing and state management. Verify modal doesn't interfere with other UI components or overlays.",
            "testStrategy": "Test modal functionality from different pages and views in the application. Verify proper rendering order and z-index stacking. Test interaction with existing modals, dropdowns, or overlays. Ensure navigation and routing work correctly with modal open.",
            "priority": "medium",
            "dependencies": [8],
            "status": "done",
            "subtasks": []
         }
      ],
      "metadata": {
         "created": "2025-06-29T13:28:30.206Z",
         "updated": "2025-06-30T00:51:37.929Z",
         "description": "Tasks for task-viewer context"
      }
   },
   "taskmaster-update-api": {
      "tasks": [
         {
            "id": 1,
            "title": "Create File System Write Utilities",
            "description": "Implement atomic file writing utilities for safe JSON file operations",
            "details": "Create `/utils/filesystem.ts` with functions: `writeJsonFile()` for atomic file writing using temporary files, `acquireFileLock()` for simple file locking (last-write-wins approach), and `validateTaskUpdate()` for input validation. Use Node.js `fs` module with `fs.writeFileSync()` to write to temporary file first, then rename to target file for atomicity. Include error handling for file system operations and JSON serialization.",
            "testStrategy": "Test concurrent write operations, verify file integrity after writes, test error scenarios like permission denied and disk full, validate temporary file cleanup on success and failure",
            "priority": "medium",
            "dependencies": [],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 2,
            "title": "Implement Task Finding Logic",
            "description": "Create utilities to locate and access tasks within nested tag hierarchies",
            "details": "Add functions to `/lib/taskmaster-service.ts`: `findTaskInTag()` to locate task by ID within specific tag context, supporting nested subtask IDs like '1.2.1'. Implement `updateTaskInPlace()` to modify task while preserving structure. Handle dot notation parsing for subtask IDs and recursive traversal of task hierarchies. Support both main tasks and nested subtasks.",
            "testStrategy": "Test finding tasks with various ID formats (1, 1.2, 1.2.1), verify correct task modification preserves other fields, test edge cases like non-existent tasks and invalid IDs",
            "priority": "high",
            "dependencies": [1],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 3,
            "title": "Add Business Logic Validation",
            "description": "Implement validation rules for task state transitions and data integrity",
            "details": "Create validation functions in `/lib/taskmaster-service.ts`: `hasIncompletSubtasks()` to check if task has pending subtasks, preventing marking parent as done with incomplete children. Validate status transitions (any status can go to cancelled, standard flow: pending → in_progress → done). Validate priority values against enum (low, medium, high, urgent). Validate assignee as string or empty. Return detailed error messages for validation failures.",
            "testStrategy": "Test status transition rules, verify subtask completion validation, test priority value validation, test assignee validation, verify detailed error messages for each validation failure",
            "priority": "high",
            "dependencies": [2],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 4,
            "title": "Create Update Task API Endpoint",
            "description": "Build POST endpoint at /api/taskmaster/tasks/update for task modifications",
            "details": "Create `/app/api/taskmaster/tasks/update/route.ts` with POST handler. Accept request body with tag, taskId, and updates object containing status, priority, and/or assignee. Use Zod schema validation for input. Read current tasks.json, find and update specified task, write back atomically. Return UpdateTaskResponse with success boolean, updated task data, error message, and timestamp. Handle all error cases with appropriate HTTP status codes.",
            "testStrategy": "Test API endpoint with valid requests, test input validation with invalid data, test error responses for non-existent tasks, verify atomic file operations, test concurrent API calls",
            "priority": "high",
            "dependencies": [3],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 5,
            "title": "Define TypeScript Interfaces and Schemas",
            "description": "Create type definitions and Zod schemas for API request/response validation",
            "details": "Define UpdateTaskRequest interface with tag (string), taskId (string), and updates object containing optional status, priority, assignee fields. Define UpdateTaskResponse interface with success boolean, optional data (TaskmasterTask), optional error string, and timestamp. Create corresponding Zod schemas for runtime validation. Ensure compatibility with existing TaskmasterTask, TaskStatus, and Priority types.",
            "testStrategy": "Validate schema parsing with valid and invalid inputs, test type compatibility with existing interfaces, verify error messages from schema validation",
            "priority": "medium",
            "dependencies": [],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 6,
            "title": "Create Tanstack Query Mutation Hook",
            "description": "Implement React hook for optimistic task updates with error handling",
            "details": "Create `useUpdateTask()` mutation hook in `/hooks/use-taskmaster-queries.ts`. Implement optimistic updates that immediately update UI before server confirmation. Use Tanstack Query's `useMutation` with `onMutate` for optimistic updates, `onError` for rollback with toast notification, and `onSuccess` for cache invalidation. Include proper TypeScript typing and error handling.",
            "testStrategy": "Test optimistic updates work immediately, verify rollback on API errors, test cache invalidation on success, verify toast notifications for errors, test loading states",
            "priority": "high",
            "dependencies": [4, 5],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 7,
            "title": "Integrate Update Functionality with Existing Selectors",
            "description": "Connect update mutations to existing status, priority, and assignee selector components",
            "details": "Modify existing selector components (status-selector.tsx, priority-selector.tsx, assignee-selector.tsx) to use the `useUpdateTask()` hook. Add onClick handlers that trigger mutations when values change. Ensure components show loading states during updates and handle errors gracefully. Maintain existing UI patterns and component structure without creating new components.",
            "testStrategy": "Test each selector triggers updates correctly, verify loading states display properly, test error handling in UI components, ensure existing functionality remains unchanged",
            "priority": "medium",
            "dependencies": [6],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 8,
            "title": "Add Error Toast Notifications",
            "description": "Implement user-friendly error notifications for failed update operations",
            "details": "Integrate toast notifications for update failures using existing toast system. Display clear, actionable error messages for common scenarios like validation failures and file system errors. Include retry functionality where appropriate. Ensure toast messages are user-friendly and not technical error codes.",
            "testStrategy": "Test toast notifications appear for various error scenarios, verify message clarity and usefulness, test retry functionality if implemented, ensure toasts don't interfere with UI",
            "priority": "medium",
            "dependencies": [6],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 9,
            "title": "Test Concurrent Update Scenarios",
            "description": "Validate system behavior with multiple simultaneous task updates",
            "details": "Test scenarios with multiple users or browser tabs updating tasks simultaneously. Verify file locking works correctly and last-write-wins behavior is acceptable. Test WebSocket synchronization ensures all clients receive updates. Verify no data corruption occurs during concurrent operations. Document any limitations or edge cases discovered.",
            "testStrategy": "Simulate concurrent updates from multiple browser tabs, test file system integrity under load, verify WebSocket updates propagate correctly, test recovery from failed writes",
            "priority": "medium",
            "dependencies": [7, 8],
            "status": "done",
            "subtasks": []
         },
         {
            "id": 10,
            "title": "Validate WebSocket Integration and Real-time Updates",
            "description": "Ensure existing WebSocket system properly handles and propagates task updates",
            "details": "Verify that when tasks.json file is updated via API, the existing file watcher detects changes and triggers WebSocket notifications to all connected clients. Test that UI updates in real-time across multiple browser windows/tabs. Ensure no additional WebSocket changes are needed since file watcher should detect API-driven file changes automatically.",
            "testStrategy": "Test real-time updates across multiple browser tabs, verify file watcher detects API changes, test WebSocket message propagation, ensure UI stays synchronized across clients",
            "priority": "medium",
            "dependencies": [9],
            "status": "done",
            "subtasks": []
         }
      ],
      "metadata": {
         "created": "2025-06-30T16:12:43.811Z",
         "updated": "2025-07-01T01:06:23.575Z",
         "description": "Tasks for taskmaster-update-api context",
         "updatedAt": "2025-07-01T01:27:34.156Z"
      }
   }
}
